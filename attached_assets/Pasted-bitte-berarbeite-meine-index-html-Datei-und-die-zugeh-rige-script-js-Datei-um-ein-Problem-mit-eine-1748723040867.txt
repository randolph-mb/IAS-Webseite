bitte überarbeite meine index.html-Datei und die zugehörige script.js-Datei, um ein Problem mit einem langen (ca. 4 Sekunden) sichtbaren Zwischenzustand im Hero-Bereich beim initialen Laden der Seite zu beheben. Das Ziel ist, diesen Zwischenzustand (der aktuell als dunkler Block ohne Inhalt erscheint, bevor das eigentliche Hero-Bild und der Text geladen sind) zu eliminieren oder drastisch zu verkürzen.
Aktueller Stand und Problem:
Die Hero-Section (#hero-section) verwendet ein CSS-Hintergrundbild (assets/welcome-min.png) und eine Fallback-Hintergrundfarbe. Der Inhalt (#hero-content-layer) wird per JavaScript und CSS-Transition eingeblendet, nachdem die Klasse hero-image-loaded zum <body>-Tag hinzugefügt wird. Die Höhenanpassung der Hero-Section erfolgt ebenfalls per JavaScript. Der lange Zwischenzustand entsteht vermutlich dadurch, dass das Einblenden des Inhalts an das window.load-Event gekoppelt ist, welches sich verzögert, wenn das Hero-Bild langsam oder fehlerhaft lädt.
Bitte führe folgende spezifische Änderungen durch:
In index.html:
Überprüfung und Korrektur des Preload-Links und Bildpfads:
Stelle sicher, dass der <link rel="preload" as="image" href="..."> im <head> den exakt gleichen und korrekten Pfad zum Hero-Hintergrundbild verwendet, wie er im style-Attribut der <section id="hero-section"> angegeben ist. Aktuell gibt es eine Diskrepanz (assets/welcome.png vs. assets/welcome-min.png). Vereinheitliche dies auf den korrekten Pfad des optimierten Bildes (z.B. assets/welcome-min.png oder ein neuer Name wie assets/hero-background.png).
CSS-Anpassung im <style>-Block im <head>:
Die Fallback-background-color für #hero-section (#1F2937) ist gut und soll beibehalten werden.
Passe die transition für #hero-content-layer an, um den transition-delay zu reduzieren oder zu entfernen, damit der Inhalt schneller erscheint, sobald die Klasse hero-image-loaded gesetzt wird.
Ändere z.B. transition: opacity 0.7s ease-in-out 0.3s; zu transition: opacity 0.5s ease-in-out; (ohne expliziten Delay oder mit einem sehr kurzen Delay wie 0.1s).
In script.js (oder dem <script>-Tag in index.html):
Zeitpunkt der Ausführung von adjustHeroSectionHeight() und revealHeroContent() ändern:
Diese beiden Funktionen sollen nicht mehr beim window.load-Event aufgerufen werden.
Stattdessen sollen adjustHeroSectionHeight() und revealHeroContent() innerhalb eines DOMContentLoaded-Event-Listeners aufgerufen werden. Dies stellt sicher, dass die Höhe angepasst und der Inhalt (fast) sofort eingeblendet wird, sobald die HTML-Struktur bereit ist, ohne auf das Laden aller externen Ressourcen (wie Bilder) warten zu müssen.
Der window.addEventListener('resize', adjustHeroSectionHeight);-Listener soll beibehalten werden.
Beispielhafte Struktur im JavaScript:
function adjustHeroSectionHeight() { /* ... Implementierung bleibt ... */ }
function revealHeroContent() { document.body.classList.add('hero-image-loaded'); }

document.addEventListener('DOMContentLoaded', function() {
  adjustHeroSectionHeight();
  revealHeroContent();

  // Hier auch anderen Code platzieren, der vom DOM abhängig ist (z.B. Current Year, Mobile Menu Listener)
  // ...
});

window.addEventListener('resize', adjustHeroSectionHeight);

// Andere Funktionen wie handleNewsletter etc.
// ...
Use code with caution.
JavaScript
Sicherstellen, dass keine anderen JavaScript-Logiken eine künstliche 4-Sekunden-Verzögerung für den Hero-Bereich einführen. (Basierend auf dem aktuellen script.js ist dies unwahrscheinlich, aber eine generelle Anweisung).
Wichtiger Hinweis zur Bildoptimierung (außerhalb der direkten Code-Änderung durch die KI):
Bitte erinnere mich daran, dass ich das verwendete Hero-Hintergrundbild (assets/welcome-min.png oder der vereinheitlichte Name) auf seine Dateigröße und korrekte Verlinkung überprüfen und es gegebenenfalls drastisch weiter optimieren (komprimieren, skalieren, evtl. WebP-Format) muss, da dies die Hauptursache für lange Ladezeiten sein kann, die den window.load-Trigger verzögern.
Ziel des Ergebnisses:
Der Benutzer soll nach dem Laden des HTML-Grundgerüsts so schnell wie möglich die Hero-Section in korrekter Höhe mit der Fallback-Farbe und dem sanft eingeblendeten Text-Overlay sehen. Das eigentliche Hintergrundbild lädt dann darüber. Der 4-sekündige "leere" oder nur farbige Zustand ohne Text soll eliminiert werden.