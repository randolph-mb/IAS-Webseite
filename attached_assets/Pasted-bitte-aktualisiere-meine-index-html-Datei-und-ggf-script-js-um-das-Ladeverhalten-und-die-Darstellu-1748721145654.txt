bitte aktualisiere meine index.html-Datei und ggf. script.js, um das Ladeverhalten und die Darstellung des Hero-Abschnitts zu optimieren.
Kontext:
Wir haben bereits eine JavaScript-Funktion (adjustHeroSectionHeight), die die Höhe der Hero-Section dynamisch anpasst, um den Platz unter dem sticky Header korrekt auszufüllen. Das Problem ist, dass während das große Hintergrundbild (assets/welcome.png) für die Hero-Section lädt, ein unschöner Zwischenzustand entsteht.
Ziel:
Sicherstellen, dass die Hero-Section sofort die korrekte, dynamisch berechnete Höhe hat.
Während das Haupt-Hintergrundbild lädt, soll ein ansprechender Platzhalter (eine passende Hintergrundfarbe) angezeigt werden.
Der Text-Overlay im Hero-Bereich soll initial unsichtbar sein und erst sanft eingeblendet werden, wenn die grundlegende Seitenstruktur geladen ist, um zu verhindern, dass er über einem "leeren" oder unvollständigen Hintergrund schwebt.
Das Laden des Haupt-Hero-Bildes soll priorisiert werden.
Bitte führe folgende Änderungen durch:
In index.html:
Stelle sicher, dass die IDs korrekt gesetzt sind:
Das <header>-Element soll die id="site-header" haben.
Die Hero-<section> soll die id="hero-section" haben.
Das innere div (Content Layer mit bg-black/40) innerhalb der hero-section soll die id="hero-content-layer" haben.
Anpassung der Hero-Section:
Entferne die Tailwind-Klasse h-screen von der <section id="hero-section">, falls noch vorhanden. Die Höhe wird dynamisch per JavaScript gesetzt.
Der Inline-Style style="background-image: url('assets/welcome.png');" für die hero-section bleibt bestehen.
Preload Link im <head>:
Füge folgenden Link-Tag in den <head>-Bereich ein, um das Hero-Bild vorzuladen:
<link rel="preload" as="image" href="assets/welcome.png">
Use code with caution.
Html
CSS-Stile im <head> (innerhalb eines <style>-Tags):
Füge folgende CSS-Regeln hinzu, um den Ladezustand zu verbessern:
<style>
  #hero-section {
    background-color: #1F2937; /* Fallback-Hintergrundfarbe (z.B. Tailwind bg-gray-800). Bitte anpassen, falls ein anderer Farbton besser zum Design passt, während das Bild lädt. */
    /* Optional: transition: background-image 0.5s ease-in-out; für sanfteres Erscheinen des Bildes */
  }
  #hero-content-layer {
    opacity: 0; /* Initial unsichtbar */
    transition: opacity 0.7s ease-in-out 0.3s; /* Sanftes Einblenden (0.7s Dauer, 0.3s Verzögerung) */
  }
  body.hero-image-loaded #hero-content-layer {
    opacity: 1; /* Macht den Inhalt sichtbar, wenn Klasse am Body gesetzt ist */
  }
</style>
Use code with caution.
Html
In script.js (oder im <script>-Tag am Ende der index.html):
Beibehaltung der adjustHeroSectionHeight-Funktion: Diese Funktion ist weiterhin notwendig.
function adjustHeroSectionHeight() {
  const header = document.getElementById('site-header');
  const heroSection = document.getElementById('hero-section');
  if (header && heroSection) {
    const headerHeight = header.offsetHeight;
    heroSection.style.height = `calc(100vh - ${headerHeight}px)`;
  }
}
Use code with caution.
JavaScript
Neue Funktion revealHeroContent:
Erstelle eine Funktion, die dem <body>-Tag eine Klasse hinzufügt, um das Einblenden des Text-Overlays zu steuern:
function revealHeroContent() {
  document.body.classList.add('hero-image-loaded');
}
Use code with caution.
JavaScript
Event Listener anpassen/erweitern:
Die adjustHeroSectionHeight-Funktion soll weiterhin bei load und resize aufgerufen werden.
Die neue revealHeroContent-Funktion soll ebenfalls beim load-Event des Fensters aufgerufen werden.
window.addEventListener('load', function() {
  adjustHeroSectionHeight();
  revealHeroContent();
});

window.addEventListener('resize', adjustHeroSectionHeight);
Use code with caution.
JavaScript
Stelle sicher, dass andere vorhandene JavaScript-Funktionen (für Mobile Menu, Current Year, Newsletter etc.) korrekt integriert bleiben und funktionieren.